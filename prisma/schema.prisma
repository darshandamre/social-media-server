// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedIndexes"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid()) @db.Uuid
  username      String     @unique @db.VarChar(15)
  email         String     @unique
  name          String?    @db.VarChar(50)
  password      String
  bio           String?    @db.VarChar(200)
  portfolioLink String?    @db.VarChar(100)
  posts         Post[]
  followers     Follow[]   @relation("followersOnUser")
  following     Follow[]   @relation("followingOnUser")
  likes         Like[]
  comments      Comment[]
  bookmarks     Bookmark[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([username])
  @@index([email])
}

model Post {
  id           String     @id @default(uuid()) @db.Uuid
  content      String     @db.VarChar(500)
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String     @db.Uuid
  comments     Comment[]
  likedBy      Like[]
  bookmarkedBy Bookmark[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([authorId])
}

model Follow {
  user       User   @relation("followersOnUser", fields: [userId], references: [id], map: "user_is_following_fk")
  userId     String @db.Uuid
  follower   User   @relation("followingOnUser", fields: [userId], references: [id], map: "follower_of_user_fk")
  followerId String @db.Uuid

  @@id([userId, followerId])
  @@index([followerId])
}

model Like {
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  @@id([postId, userId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  content   String   @db.VarChar(500)
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.Uuid
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model Bookmark {
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.Uuid

  @@id([userId, postId])
  @@index([postId])
}
